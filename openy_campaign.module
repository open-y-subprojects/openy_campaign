<?php

/**
 * @file
 * Module file.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\ContentEntityTypeInterface;

/**
 * Implements hook_theme().
 */
function openy_campaign_theme($existing, $type, $theme, $path) {
  return [
    // Popup templates.
    'openy_campaign_login' => [
      'variables' => [
        'header' => NULL,
        'form' => NULL,
      ],
      'template' => 'openy-campaign-login',
    ],
    'openy_campaign_register' => [
      'variables' => [
        'header' => NULL,
        'form' => NULL,
      ],
      'template' => 'openy-campaign-register',
    ],
    'openy_campaign_activity_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements template_preprocess_node().
 */
function openy_campaign_preprocess_node(&$variables, $hook) {
  // Find published Landing page and render it on Campaign page.
  if ($variables['node']->getType() == 'campaign' && $variables['view_mode'] == 'full') {
    // Render the first published Landing page
    $campaignMenuService = \Drupal::service('openy_prgf_campaign_menu.menu_handler');
    $renderLandingPage = $campaignMenuService->getActiveCampaignPage($variables['node']);

    $build = \Drupal::entityTypeManager()->getViewBuilder('node')->view($renderLandingPage);
    $variables['content']['landing_page'] = $build;
  }
}


/**
 * Implements hook_entity_type_build().
 */
function openy_campaign_entity_type_build(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  foreach ($entity_types as &$entity_type) {
    if ($entity_type instanceof ContentEntityTypeInterface) {
      // Override handler by custom implementation.
      $entity_type->setHandlerClass('entity_clone', 'Drupal\openy_campaign\EntityClone\Content\ContentEntityCloneBase');
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function openy_campaign_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $fieldName = $context['items']->getName();
  if ($fieldName == 'field_campaign_pages') {
    // Output publishing dates in the backend.
    /** @var \Drupal\node\Entity\Node $node */
    $node = $element['target_id']['#default_value'];
    if (empty($node)) {
      return;
    }

    $publishOn = $unpublishOn = NULL;

    $date_formatter = \Drupal::service('date.formatter');
    if (!empty($node->publish_on->value) && $node->publish_on->value && is_numeric($node->publish_on->value)) {
      $publishOn = $date_formatter->format($node->publish_on->value, 'short');
    }
    if (!empty($node->unpublish_on->value) && $node->unpublish_on->value && is_numeric($node->unpublish_on->value)) {
      $unpublishOn = $date_formatter->format($node->unpublish_on->value, 'short');
    }

    $templateString = '';
    if (!empty($publishOn) && !empty($unpublishOn)) {
      $templateString = 'active from <i>@publish_on</i> to <i>@unpublish_on</i>';
    }
    else if (empty($publishOn) && !empty($unpublishOn)) {
      $templateString = 'active until <i>@unpublish_on</i>';
    }
    else if (!empty($publishOn) && empty($unpublishOn)) {
      $templateString = 'active since <i>@publish_on</i>';
    }

    $message = t($templateString, [
      '@publish_on' => $publishOn,
      '@unpublish_on' => $unpublishOn,
    ]) . ' <a href="' . $node->url('edit-form') . '">' . t('Edit page') . '</a>';

    $element['#suffix'] = '<div class="publishing-dates">' . $message . '</div>';
  }

}

/**
 * Clean email from Personify.
 *
 * @param string $email
 *   Email.
 *
 * @return string
 *   Email.
 */
function cleanPersonifyEmail($email) {
  $email = Unicode::strtolower($email);
  if (Unicode::substr($email, -1, 1) == '.') {
    $email = Unicode::substr($email, 0, Unicode::strlen($email) - 1);
  }
  if (Unicode::substr($email, 0, 1) == '/') {
    $email = Unicode::substr($email, 1, Unicode::strlen($email));
  }

  return $email;
}
