<?php

/**
 * @file
 * Module file.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\openy_campaign\Entity\MemberCampaign;

define('CAMPAIGN_MENU_PAGES_MAX', 5);
define('CAMPAIGN_THEME', 'openy_campaign_theme');
define('OPENY_THEME', 'openy_rose');

/**
 * Implements hook_theme().
 */
function openy_campaign_theme($existing, $type, $theme, $path) {
  return [
    // Campaign menu.
    'openy_campaign_campaign_menu' => [
      'variables' => [
        'base_path' => base_path(),
        'links' => [],
      ],
      'template' => 'openy-campaign-campaign-menu',
    ],
    // Campaign register block.
    'openy_campaign_campaign_register' => [
      'variables' => [
        'base_path' => base_path(),
        'campaign' => NULL,
        'activeRegistration' => NULL,
        'form' => NULL
      ],
      'template' => 'openy-campaign-campaign-register',
    ],
    // Popup template.
    'openy_campaign_popup' => [
      'variables' => [
        'form' => NULL,
      ],
      'template' => 'openy-campaign-popup',
    ],
    // Registration popup text
    'openy_campaign_register_text' => [
      'variables' => [
        'text' => NULL,
      ],
      'template' => 'openy-campaign-register-text',
    ],
    // Winners block text
    'openy_campaign_winners' => [
      'variables' => [
        'title' => NULL,
        'prize' => NULL,
        'winners' => [],
      ],
      'template' => 'openy-campaign-winners',
    ],
    // Activity tracking block.
    'openy_campaign_activity_block' => [
      'variables' => [
        'activities' => [],
      ],
    ],
    // Visits goal block.
    'openy_campaign_visits_goal' => [
      'variables' => [
        'goal' => NULL,
        'current' => NULL,
        'title' => NULL,
        'goal_message' => NULL,
      ],
      'template' => 'openy-campaign-visits-goal',
    ],

    // Games block.
    'openy_campaign_games' => [
      'variables' => [
        'form' => NULL,
        'campaign' => NULL
      ],
      'template' => 'openy-campaign-games',
      'render element' => 'form',
    ],

    // Instant Game: Magic Ball
    'openy_campaign_game_magic_ball' => [
      'variables' => [
        'link' => NULL,
        'result' => NULL,
      ],
      'template' => 'games/magic-ball',
    ],

    // Instant Game: Scratchpad
    'openy_campaign_game_scratchcard' => [
      'variables' => [
        'link' => NULL,
        'result' => NULL,
      ],
      'template' => 'games/scratchcard',
    ],

    // Instant Game: Flip Card
    'openy_campaign_game_flip_cards' => [
      'variables' => [
        'link' => NULL,
        'result' => NULL,
        'title' => NULL,
        'description' => NULL,
        'coverImagePath' => NULL,
        'isWinner' => NULL,
        'message' => NULL,
        'messageTitle' => NULL,
      ],
      'template' => 'games/flip-cards',
    ],

  ];
}

/**
 * Implements hook_token_info().
 */
function openy_campaign_token_info() {
  $type = array(
    'name' => t('Campaigns'),
    'description' => t('Tokens related to campaigns.'),
  );

  // Custom tokens for Campaign node.
  $node['login-link'] = array(
    'name' => t('Login link'),
    'description' => t('Show Member login link for campaign (linked text from Campaign edit page).'),
  );
  $node['register-link'] = array(
    'name' => t('Registration link'),
    'description' => t('Show Member registration URL for campaign (linked text from Campaign edit page).'),
  );
  $node['check-back-date'] = array(
    'name' => t('Check back on XX DATE'),
    'description' => t('Specific date text entered in Campaign edit page'),
  );
  $node['title'] = array(
    'name' => t('Campaign Title'),
  );
  $node['goal'] = array(
    'name' => t('Visits goal'),
    'description' => t('Visits goal for the current user.'),
  );

  return array(
    'types' => array('campaign' => $type),
    'tokens' => array('campaign' => $node),
  );
}

/**
 * Implements hook_tokens().
 */
function openy_campaign_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type != 'campaign') {
    return [];
  }

  // Get node from current page URL and check referenced campaign.
  /** @var \Drupal\Node\Entity\Node $campaign */
  $campaign = \Drupal::service('openy_campaign.campaign_menu_handler')->getCampaignNodeFromRoute();

  foreach ($tokens as $name => $original) {
    switch ($name) {
      case 'login-link':
        $text = $campaign->field_token_login_link_text->value;

        $url = Url::fromRoute('openy_campaign.member-action',
          ['action' => 'login', 'campaign_id' => $campaign->id()]
        );
        $url->setOptions([
          'attributes' => [
            'class' => [
              'use-ajax',
              'login'
            ],
          ],
        ]);
        $replacements[$original] = Link::fromTextAndUrl($text, $url)->toString();;
        break;

      case 'register-link':
        $text = $campaign->field_token_register_link_text->value;

        $url = Url::fromRoute('openy_campaign.member-action',
          ['action' => 'registration', 'campaign_id' => $campaign->id()]
        );
        $url->setOptions([
          'attributes' => [
            'class' => [
              'use-ajax',
              'register'
            ],
          ],
        ]);
        $replacements[$original] = Link::fromTextAndUrl($text, $url)->toString();
        break;

      case 'check-back-date':
        $replacements[$original] = $campaign->field_token_check_back_date->value;
        break;

      case 'title':
        $replacements[$original] = $campaign->getTitle();
        break;

      case 'goal':
        $goal = 0;
        if (!empty($campaign) && MemberCampaign::isLoggedIn($campaign->id())) {
          $userData = MemberCampaign::getMemberCampaignData($campaign->id());
          $memberCampaignID = MemberCampaign::findMemberCampaign($userData['membership_id'], $campaign->id());
          $memberCampaign = MemberCampaign::load($memberCampaignID);
          $goal = !empty($memberCampaign->getGoal()) ? $memberCampaign->getGoal() : 0;
        }

        $replacements[$original] = $goal;
        break;
    }
  }
  return $replacements;
}

/**
 * Implements hook_cron().
 */
function openy_campaign_cron() {
  // Check if cron was run less then 1 hrs ago and not at 2 AM.
  $lastRun = \Drupal::state()->get('openy_campaign.cron_visits_last_run', 0);
  $current = new \DateTime();
  $currentHour = $current->format('H');
  if ((\Drupal::time()->getRequestTime() - $lastRun) < 1 * 60 * 60 || ($currentHour != 2)) {
    return FALSE;
  }

  /** @var \Drupal\openy_campaign\RegularUpdater $regularUpdater */
  $regularUpdater = \Drupal::service('openy_campaign.regular_updater');

  // Yesterday date - From.
  $dateFrom = new \DateTime();
  $dateFrom->sub(new \DateInterval('P1D'))->setTime(0, 0, 0);

  // Yesterday date - To.
  $dateTo = new \DateTime();
  $dateTo->sub(new \DateInterval('P1D'))->setTime(23, 59, 59);

  $regularUpdater->createQueue($dateFrom, $dateTo);

  // Update last run.
  \Drupal::state()->set('openy_campaign.cron_visits_last_run', \Drupal::time()->getRequestTime());
}

/**
 * Implements hook_preprocess_node().
 */
function openy_campaign_preprocess_node(&$variables, $hook) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];
  if (!in_array($node->getType(), ['campaign', 'campaign_page'])) {
    return;
  }

  $campaignMenuService = \Drupal::service('openy_campaign.campaign_menu_handler');
  // Find which published Campaign page needs to be rendered on Campaign page.
  if ($node->getType() == 'campaign' && $variables['view_mode'] == 'full') {
    $requestLandingPage = $campaignMenuService->getActiveCampaignPage($node);

    if (!empty($requestLandingPage)) {
      $build = \Drupal::entityTypeManager()->getViewBuilder('node')->view($requestLandingPage);
      $variables['content']['landing_page'] = $build;
    }
  }
  $variables['#attached']['library'][] = 'openy_campaign/campaign_modal';

  // Check if user is allowed to enter the page.
  if (!$campaignMenuService->checkPermissions($node)) {
    // TODO: open login popup.
  }

}

/**
 * Implements hook_entity_type_build().
 */
function openy_campaign_entity_type_build(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  foreach ($entity_types as &$entity_type) {
    if ($entity_type instanceof ContentEntityTypeInterface) {
      // Override handler by custom implementation.
      $entity_type->setHandlerClass('entity_clone', 'Drupal\openy_campaign\EntityClone\Content\ContentEntityCloneBase');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Forbid editing some Member entity fields from admin panel.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function openy_campaign_form_openy_campaign_member_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $readonlyFields = [
    'membership_id',
    'personify_id',
    'personify_email'
  ];
  foreach ($readonlyFields as $field) {
    $form[$field]['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function openy_campaign_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $fieldName = $context['items']->getName();
  $landingFields = [
    'field_campaign_pages',
    'field_pause_landing_page',
  ];
  if (in_array($fieldName, $landingFields)) {
    // Output publishing dates in the backend.
    /** @var \Drupal\node\Entity\Node $node */
    $node = $element['target_id']['#default_value'];
    if (empty($node)) {
      return;
    }

    $publishOn = $unpublishOn = NULL;

    $date_formatter = \Drupal::service('date.formatter');
    if (!empty($node->publish_on->value) && $node->publish_on->value && is_numeric($node->publish_on->value)) {
      $publishOn = $date_formatter->format($node->publish_on->value, 'short');
    }
    if (!empty($node->unpublish_on->value) && $node->unpublish_on->value && is_numeric($node->unpublish_on->value)) {
      $unpublishOn = $date_formatter->format($node->unpublish_on->value, 'short');
    }

    $templateString = '';
    if (!empty($publishOn) && !empty($unpublishOn)) {
      $templateString = 'published from <i>@publish_on</i> to <i>@unpublish_on</i>';
    }
    else if (empty($publishOn) && !empty($unpublishOn)) {
      $templateString = 'published until <i>@unpublish_on</i>';
    }
    else if (!empty($publishOn) && empty($unpublishOn)) {
      $templateString = 'published since <i>@publish_on</i>';
    }

    $message = t($templateString, [
      '@publish_on' => $publishOn,
      '@unpublish_on' => $unpublishOn,
    ]) . ' <a href="' . $node->url('edit-form') . '">' . t('Edit page') . '</a>';

    $element['#suffix'] = '<div class="publishing-dates">' . $message . '</div>';
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openy_campaign_form_node_campaign_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  openy_campaign_campaign_menu_field_render($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openy_campaign_form_node_campaign_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  openy_campaign_campaign_menu_field_render($form, $form_state);
}

function openy_campaign_campaign_menu_field_render(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'openy_campaign_campaign_menu_field_submit';
    }
  }

  $form['campaign_menu'] = [
    '#type' => 'fieldset',
    '#title' => t('Campaign Menu'),
    '#tree' => TRUE,
    '#weight' => 10,
  ];

  $campaignPages = [];
  $campaignMenu = [];
  if ($form_state->getFormObject() instanceof \Drupal\Core\Entity\EntityForm) {
    $campaign = $form_state->getFormObject()->getEntity();
    foreach ($campaign->get('field_campaign_pages')->getValue() as $item) {
      if (!empty($item)) {
        $campaignPage = \Drupal\node\Entity\Node::load($item['target_id']);
        $campaignPages[$campaignPage->id()] = $campaignPage->getTitle();
      }
    }
    $campaignMenu = $campaign->get('field_campaign_menu')->getValue();

    if (!empty($campaignMenu)) {
      $campaignMenu = unserialize($campaign->field_campaign_menu->value);
    }
  }

  foreach ($campaignPages as $campaignPageId => $campaignPageTitle) {
    $form['campaign_menu'][$campaignPageId] = [
      '#type' => 'details',
      '#title' => t('Menu: @title', ['@title' => $campaignPageTitle]),
    ];

    $menuBlock = &$form['campaign_menu'][$campaignPageId];
    $links = $campaignMenu[$campaignPageId]['links'];

    $menuBlock['links'] = [
      '#type' => 'table',
      '#header' => [
        t('Page'),
        '',
        t('Menu Title'),
        t('Logged'),
        t('Actions'),
      ],
      '#tabledrag' => [
        [
          'action' => 'order',
          'relationship' => 'sibling',
          'group' => 'menu-weight-' . $campaignPageId,
        ],
      ],
    ];

    for ($row = 0; $row < CAMPAIGN_MENU_PAGES_MAX; $row++) {
      $linksRow = array_shift($links);
      $menuBlock['links'][$row]['#attributes']['class'][] = 'draggable';
      $menuBlock['links'][$row]['#weight'] = $linksRow['weight'];

      $page = NULL;
      if (!empty($linksRow['page'])) {
        $page = \Drupal\node\Entity\Node::load($linksRow['page'][0]['target_id']);
      }

      $menuBlock['links'][$row]['page'] = [
        '#type' => 'entity_autocomplete',
        '#target_type' => 'node',
        '#title' => t('Pages'),
        '#title_display' => 'invisible',
        '#default_value' => $page,
        '#tags' => TRUE,
        '#size' => 25,
        '#selection_settings' => [
          'target_bundles' => ['campaign_page'],
        ],
      ];

      $menuBlock['links'][$row]['weight'] = [
        '#type' => 'textfield',
        '#title' => t('Weight for @title', ['@title' => $linksRow['title']]),
        '#title_display' => 'invisible',
        '#size' => 4,
        '#default_value' => $linksRow['weight'],
        '#attributes' => ['class' => ['menu-weight-' . $campaignPageId]],
      ];

      $menuBlock['links'][$row]['title'] = [
        '#type' => 'textfield',
        '#title_display' => 'invisible',
        '#title' => t('Menu Title'),
        '#default_value' => $linksRow['title'],
        '#size' => 15,
      ];

      $menuBlock['links'][$row]['logged'] = [
        '#type' => 'checkbox',
        '#title_display' => 'invisible',
        '#title' => t('Logged'),
        '#default_value' => $linksRow['logged'],
      ];

      $menuBlock['links'][$row]['actions'] = [
        '#markup' => !empty($page)
          ? '<a href="' . $page->url('edit-form') . '">' . t('Edit') . '</a>'
          : '',
      ];

    }

  }
}

function openy_campaign_campaign_menu_field_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $campaignMenu = $form_state->getValue('campaign_menu');
  if (empty($campaignMenu)) {
    return;
  }
  /** @var Drupal\node\Entity\Node $campaign */
  if ($campaign = $form_state->getFormObject()->getEntity()) {
    $campaign->set('field_campaign_menu', serialize($campaignMenu));
    $campaign->save();

    $pagesIds = [];
    // Update relations of Campaign pages with the Campaign.
    foreach ($campaignMenu as $menu) {
      foreach ($menu['links'] as $link) {
        if (empty($link['page'])) {
          continue;
        }
        $pagesIds[] = $link['page'][0]['target_id'];
      }
    }

    // Update Pause Campaign Page.
    $pausePage = $form_state->getValue('field_pause_landing_page');
    if (!empty($pausePage)) {
      $pagesIds[] = $pausePage[0]['target_id'];
    }

    foreach ($pagesIds as $id) {
      if (empty($id)) {
        continue;
      }
      $campaignPage = \Drupal\node\Entity\Node::load($id);
      if ($campaignPage->hasField('field_campaign_parent')) {
        $campaignPage->set('field_campaign_parent', $campaign);
        $campaignPage->save();
      }
    }
  }
}

/**
 * Manually create checkin. To be used for testing.
 *
 * @param $campaignMemberId
 * @param $dateString
 */
function openy_campaign_create_checkin($campaignMemberId, $dateString) {
  $date = new \DateTime($dateString);
  $checkin = \Drupal\openy_campaign\Entity\MemberCheckin::create([
    'member' => $campaignMemberId,
    'date' => $date->format('U'),
  ]);
  $checkin->save();
}

/**
 * Clean email from Personify.
 *
 * @param string $email
 *   Email.
 *
 * @return string
 *   Email.
 */
function openy_campaign_clean_personify_email($email) {
  $email = Unicode::strtolower($email);
  if (Unicode::substr($email, -1, 1) == '.') {
    $email = Unicode::substr($email, 0, Unicode::strlen($email) - 1);
  }
  if (Unicode::substr($email, 0, 1) == '/') {
    $email = Unicode::substr($email, 1, Unicode::strlen($email));
  }

  return $email;
}

function openy_campaign_preprocess_block__system_branding_block(&$variables) {
  // Get node from current page URL and check referenced campaign.
  /** @var \Drupal\Node\Entity\Node $campaign */
  $campaign = \Drupal::service('openy_campaign.campaign_menu_handler')->getCampaignNodeFromRoute();

  $variables['url'] = \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $campaign->id()]);
}